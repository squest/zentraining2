<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1452195573455">{:repl-history {:ide [], :local [&quot;(render-file\n  \&quot;text.html\&quot;\ngenerator1)&quot; &quot;(selmer.parser/cache-on!)&quot; &quot;(selmer.parser/cache-off!)&quot; &quot;\nproblem1&quot; &quot;(spit \&quot;resources/problem1.html\&quot; (makesoal latex.generator1/problem1))&quot; &quot;resources/problem001/generator.clj/generator&quot; &quot;(let [a (rand-nth (range 1 10))\n      pangkat1 (rand-nth (range 2 5))\n\n      b (rand-nth (range 2 5))\n      pangkat2 (rand-nth (range 2 5))\n\n      c (+ (int (Math/pow a pangkat1))\n           (int (Math/pow b pangkat2)))]\n  {:a a\n   :b b\n   :c c\n\n   :pangkat1 pangkat1\n   :pangkat2 pangkat2})&quot; &quot;resources/problem001/generator.clj&quot; &quot;(last (edn/read-string (slurp \&quot;resources/problem001/generator.clj\&quot;)))&quot; &quot;(let\n  [a\n   (rand-nth (range 1 10))\n   pangkat1\n   (rand-nth (range 2 5))\n   b\n   (rand-nth (range 2 5))\n   pangkat2\n   (rand-nth (range 2 5))\n   c\n   (+ (int (Math/pow a pangkat1)) (int (Math/pow b pangkat2)))]\n  a)&quot; &quot;(let [a (edn/read-string (slurp \&quot;resources/problem001/generator.clj\&quot;))]\n  a)&quot; &quot;(let [a (let\n          [a\n           (rand-nth (range 1 10))\n           pangkat1\n           (rand-nth (range 2 5))\n           b\n           (rand-nth (range 2 5))\n           pangkat2\n           (rand-nth (range 2 5))\n           c\n           (+ (int (Math/pow a pangkat1)) (int (Math/pow b pangkat2)))]\n          {:a a, :b b, :c c, :pangkat1 pangkat1, :pangkat2 pangkat2})\n      ]\n  a)&quot; &quot;\&quot;resources/problem001/generator.clj\&quot;&quot; &quot;resources/problem001 / generator.clj&quot; &quot;((let [teta (rand-nth [30 37 45 60])\n       cos (-&gt;&gt; (map #(Math/toRadians %) teta)\n                (map #(Math/cos %)))\n       m (rand-nth (range 1 51))\n       s (rand-nth (range 1 201))\n       f (rand-nth (range 1 501))\n       g (rand-nth [9.8 10])\n       fx (* f cos)\n       n (* m g)\n       w (* fx s)]\n   {:teta teta\n    :m    m\n    :g    g\n    :N    n\n\n    :f    f\n    :fx   fx\n    :s    s\n    :w    w})\n  )&quot; &quot;(flatten \&quot;1\&quot;)&quot; &quot;(flatten \&quot;a\&quot;)&quot; &quot;(apply \&quot;a\&quot;)&quot; &quot;(let [teta (rand-nth [30 37 45 60])\n      cos (-&gt;&gt; (map #(Math/toRadians %) teta)\n               (map #(Math/cos %)))\n      m (rand-nth (range 1 51))\n      s (rand-nth (range 1 201))\n      f (rand-nth (range 1 501))\n      g (rand-nth [9.8 10])\n      fx (* f cos)\n      n (* m g)\n      w (* fx s)]\n  {:teta teta\n   :m    m\n   :g    g\n   :N    n\n\n   :f    f\n   :fx   fx\n   :s    s\n   :w    w})\n&quot; &quot;generator.clj&quot; &quot;../resources/problem001/generator&quot; &quot;resources/problem001/generator&quot; &quot;(edn/read-string (slurp \&quot;resources/problem001/generator.clj\&quot;))&quot; &quot;(slurp \&quot;resources/problem001/generator.clj\&quot;)&quot; &quot;(read \&quot;resources/problem001/generator.clj\&quot;)&quot; &quot;(read-string (slurp \&quot;resources/problem001/generator.clj\&quot;))&quot; &quot;(def a (read-string (slurp \&quot;resources/problem001/generator.clj\&quot;)))&quot; &quot;a&quot; &quot;.problem001.generator&quot; &quot;(problem001.generator)&quot; &quot;problem001/generator&quot; &quot;gen1&quot; &quot;generator1&quot; &quot;problem001.generator&quot; &quot;generator2&quot; &quot;generator2.clj&quot; &quot;latex.generator1&quot; &quot;latex.problem001.generator1&quot; &quot;latex.problem001.generator1.gen&quot; &quot;latex/generator1/generator1&quot; &quot;latex.generator1/generator1&quot; &quot;latex.problem001.generator1/gen&quot; &quot;latex.problem001.generator1/generator&quot; &quot;latex.problem001.generator/generator&quot; &quot;D:\\Document and Data\\Zenius\\Training\\zentraining2\\AWOL\\latex\\src\\latex\\problem001\\1&quot; &quot;(slurp \&quot;problem001/1/text.html\&quot;)&quot; &quot;problem001.gen/gen&quot; &quot;problem001.gen/a&quot; &quot;(slurp \&quot;resources/problem001/1/text.html\&quot;)&quot; &quot;generator&quot; &quot;problem001.generator/generator&quot; &quot;problem1&quot; &quot;()&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  a)&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (str \&quot;.\&quot; a))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (apply str \&quot;.\&quot; a))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (apply str \&quot;.\&quot; a \&quot;3\&quot;))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (str (apply str \&quot;.\&quot; a) \&quot;3\&quot;))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str \&quot;.\&quot; a)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str \&quot;.\&quot; a)\n       str \&quot;3\&quot;))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str \&quot;.\&quot; a)\n       (str \&quot;3\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (str a \&quot;.\&quot;)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str a \&quot;.\&quot;)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str \&quot;.\&quot; a)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str \&quot;text.html\&quot; a)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (apply str a)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (str a)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(let [[&amp; a] [\&quot;a\&quot; \&quot;b\&quot;]]\n  (-&gt;&gt; (str (apply str a) \&quot;text.html\&quot;)\n       (str \&quot;resources/\&quot;)))&quot; &quot;(soalmaker [\&quot;problem001/\&quot; \&quot;1/\&quot;] \n           problem001.generator/generator\n           )&quot; &quot;(str \&quot;resources/Done/\&quot; \&quot;pkr.html\&quot;)&quot; &quot;(str \&quot;resources/Done/\&quot; \&quot;prob001_1.html\&quot;)&quot; &quot;(soalmaker [\&quot;problem001/\&quot; \&quot;1/\&quot;] \n           problem001.generator/generator\n           \&quot;prob001_1.html\&quot;)&quot; &quot;(soalmaker [\&quot;problem001/\&quot; \&quot;2/\&quot;] \n           problem001.generator/generator\n           \&quot;prob001_2.html\&quot;)&quot; &quot;(soalmaker [\&quot;problem002/\&quot; \&quot;1/\&quot;] \n           problem002.generator/generator\n           \&quot;prob002.html\&quot;)&quot;], :remote []}}</component>
</project>